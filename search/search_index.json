{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Hey Ezra!  Welcome to this Python tutorial. The goal is to build your confidence with Python's fundamentals through concise explanations, hands-on examples, and small exercises. Below are four core sections that will guide your learning from writing simple scripts to working with data and building small projects.</p>"},{"location":"#1-getting-started-installation-basics","title":"1. Getting Started: Installation &amp; Basics","text":"<p>This section covers setting up Python on your machine, choosing an editor or IDE, and running your first Python programs. You'll learn about the Python REPL, how to create and run <code>.py</code> files, and basic interpreter concepts like statements, expressions, and comments.</p>"},{"location":"#2-core-python-data-types-control-flow","title":"2. Core Python: Data Types &amp; Control Flow","text":"<p>Explore Python's built-in data types (numbers, strings, lists, tuples, sets, dictionaries) and learn to manipulate them. This section introduces variables, type conversion, comparison and logical operators, and control flow structures such as <code>if</code>/<code>elif</code>/<code>else</code>, <code>for</code> loops, and <code>while</code> loops. Small exercises focus on practical patterns like iterating collections and basic data transformation.</p>"},{"location":"#3-functions-modules-error-handling","title":"3. Functions, Modules &amp; Error Handling","text":"<p>Learn how to organize code into reusable functions, pass arguments, return values, and use default and keyword arguments. We'll also cover importing standard library modules, and handling errors and exceptions with <code>try</code>/<code>except</code>/<code>finally</code>. This section emphasizes writing clean, reusable code and simple testing approaches.</p>"},{"location":"#4-working-with-data-files-libraries-mini-projects","title":"4. Working with Data: Files, Libraries &amp; Mini Projects","text":"<p>Apply your skills to real tasks: reading and writing files, parsing CSV or JSON, and using popular libraries (like <code>requests</code>, <code>pandas</code> for data tasks, or <code>matplotlib</code> for visualization) as optional extras. The section ends with small project ideas (a CSV analyzer, a simple web-scraper, or a data plotter) to consolidate learning and build a portfolio of tiny projects.</p>"},{"location":"Lessons/1_1_Setup/","title":"1.1 Setup (Windows)","text":"<p>This page contains short, focused instructions and official links to install the tools you'll need for the course on Windows: Python, Git, and Visual Studio Code (VS Code), plus recommended VS Code extensions.</p>"},{"location":"Lessons/1_1_Setup/#install-python","title":"Install Python","text":"<ol> <li>Visit the official Python downloads page for Windows: https://www.python.org/downloads/windows/</li> <li>Download the latest stable Python 3.x installer (choose the \"Windows installer (64-bit)\" for most modern machines).</li> <li>Run the installer and IMPORTANT: check \"Add Python 3.x to PATH\" at the bottom of the installer window before clicking \"Install Now\".</li> <li> <p>Verify installation by opening a new Command Prompt (Win+R, type cmd) and running:</p> <p>python --version</p> </li> </ol> <p>Troubleshooting: If <code>python</code> is not recognized, reopen your terminal, or restart your PC to ensure PATH changes take effect. You can also run the installer again and choose \"Repair\".</p>"},{"location":"Lessons/1_1_Setup/#install-git","title":"Install Git","text":"<ol> <li>Download Git for Windows: https://git-scm.com/download/win</li> <li>Run the installer and accept the defaults (these are reasonable for beginners). Key options you'll see:<ul> <li>Use Git from the Windows Command Prompt (recommended so <code>git</code> works in cmd and PowerShell).</li> <li>Choose your preferred line ending conversions (the default is fine).</li> </ul> </li> <li> <p>After installation, verify with:</p> <p>git --version</p> </li> </ol> <p>Tip: If you plan to use Git from VS Code's terminal, default settings work well.</p>"},{"location":"Lessons/1_1_Setup/#install-visual-studio-code-vs-code","title":"Install Visual Studio Code (VS Code)","text":"<ol> <li>Download VS Code for Windows: https://code.visualstudio.com/</li> <li>Run the installer and follow the prompts. Useful options on the installer screen:<ul> <li>\"Add to PATH\" (allows launching <code>code</code> from terminal)</li> <li>\"Open with Code\" context menu entries (useful for opening folders/files)</li> </ul> </li> <li>Launch VS Code and open a terminal (View \u2192 Terminal) to ensure <code>code</code> and the shell integration work.</li> </ol>"},{"location":"Lessons/1_1_Setup/#recommended-vs-code-extensions-for-python-development","title":"Recommended VS Code Extensions for Python development","text":"<p>Install the following extensions from the VS Code Marketplace (use the Extensions view or the links below):</p> <ul> <li>Python (Microsoft) \u2014 https://marketplace.visualstudio.com/items?itemName=ms-python.python<ul> <li>Provides linting, debugging, IntelliSense, code navigation, and environment management.</li> </ul> </li> <li>Pylance (Microsoft) \u2014 https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance<ul> <li>High-performance language support and type checking (recommended alongside the Python extension).</li> </ul> </li> <li>GitLens \u2014 https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens<ul> <li>Enhances Git support inside VS Code with blame annotations, history, and navigation.</li> </ul> </li> <li>Code Spell Checker \u2014 https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker<ul> <li>Lightweight spell checking for comments and documentation.</li> </ul> </li> </ul> <p>Optional (useful later):</p> <ul> <li>Jupyter \u2014 https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter<ul> <li>If you plan to run Jupyter notebooks inside VS Code.</li> </ul> </li> <li>Bracket Pair Colorizer / similar \u2014 improves bracket matching visuals.</li> </ul>"},{"location":"Lessons/1_1_Setup/#quick-setup-checklist","title":"Quick setup checklist","text":"<ol> <li>Install Python and confirm <code>python --version</code> works.</li> <li>Install Git and confirm <code>git --version</code> works.</li> <li>Install VS Code and open a project folder.</li> <li>Install the Python and Pylance extensions in VS Code.</li> </ol>"},{"location":"Lessons/1_1_Setup/#next-steps-and-tips","title":"Next steps and tips","text":"<ul> <li>Create a folder for your course projects (for example, <code>C:\\Users\\YourName\\Projects\\python-tutorial</code>) and open it in VS Code.</li> <li> <p>Create a virtual environment for each project with:</p> <p>python -m venv .venv</p> <p>Then activate it in PowerShell:</p> <p>..venv\\Scripts\\Activate.ps1</p> <p>(In Command Prompt use <code>.venv\\Scripts\\activate.bat</code>.) - In VS Code, select the Python interpreter from the status bar and choose the interpreter inside <code>.venv</code>.</p> </li> </ul>"},{"location":"Lessons/1_1_Setup/#what-is-a-virtual-environment-and-why-use-one","title":"What is a virtual environment (and why use one?)","text":"<p>A virtual environment (venv) is an isolated Python runtime that keeps a project's dependencies (libraries and packages) separate from other projects and from the system-wide Python installation. For beginners, think of it like a small, private workspace for each project so you can safely install packages without affecting other projects.</p> <p>Why use virtual environments:</p> <ul> <li>Avoid dependency conflicts: Different projects can require different versions of the same package (for example, <code>requests</code> or <code>pandas</code>). venv keeps those versions separate.</li> <li>Reproducibility: You can capture the exact packages a project needs (via <code>pip freeze &gt; requirements.txt</code>) and reproduce the environment elsewhere.</li> <li>Safety: Installing packages globally can accidentally change tools used by other projects or the OS; venv prevents that.</li> </ul>"},{"location":"Lessons/1_1_Setup/#using-virtual-environments-inside-vs-code-recommended","title":"Using virtual environments inside VS Code (recommended)","text":"<p>It's a good idea to create and activate virtual environments using the integrated terminal in VS Code \u2014 that keeps the workflow in one place and ensures the editor picks the correct interpreter.</p> <p>Steps (PowerShell \u2014 default on many Windows systems):</p> <ol> <li>Open your project folder in VS Code (File \u2192 Open Folder...).</li> <li>Open the integrated terminal (View \u2192 Terminal). By default this may open PowerShell or the terminal you configured.</li> <li> <p>Create a virtual environment:</p> <p>python -m venv .venv</p> </li> <li> <p>Activate the virtual environment in PowerShell:</p> <p>..venv\\Scripts\\Activate.ps1</p> <p>If PowerShell blocks the script due to execution policy, run (in an Administrator PowerShell only):</p> <p>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</p> <p>Then try activating again.</p> </li> </ol> <p>Steps (Command Prompt):</p> <ol> <li>Open the integrated terminal and switch to Command Prompt (click the terminal dropdown \u2192 Select Default Shell \u2192 Command Prompt) if preferred.</li> <li> <p>Create the venv as above:</p> <p>python -m venv .venv</p> </li> <li> <p>Activate in Command Prompt:</p> <p>.venv\\Scripts\\activate.bat</p> </li> </ol> <p>After activation you'll see your prompt prefixed with <code>(.venv)</code> or similar. In VS Code you should also see the selected interpreter change in the lower-left status bar \u2014 if not, press Ctrl+Shift+P \u2192 \"Python: Select Interpreter\" and pick the <code>.venv</code> interpreter.</p> <p>Installing packages inside the active venv</p> <p>With the venv activated in the integrated terminal, install packages with pip as usual:</p> <p>PowerShell (copy/paste into VS Code terminal):</p> <pre><code>pip install requests pandas\n</code></pre> <p>Command Prompt (copy/paste into VS Code terminal):</p> <pre><code>pip install requests pandas\n</code></pre> <p>To record your dependencies for sharing:</p> <p>pip freeze &gt; requirements.txt</p> <p>To re-create the environment on another machine:</p> <p>python -m venv .venv Activate the venv, then: pip install -r requirements.txt</p> <p>Note: VS Code's Python extension will detect virtual environments in the workspace folder automatically and offer to select them. Using the integrated terminal keeps activation and package installs consistent with what the editor uses for IntelliSense and linting.</p> <p>Screenshots (optional)</p> <p>Add screenshots to illustrate these steps (recommended for beginners). Suggested images:</p> <ul> <li><code>lessons_assets/vscode_interpreter.png</code> \u2014 VS Code status bar interpreter selector.</li> <li><code>lessons_assets/terminal_activation.png</code> \u2014 Terminal showing <code>(.venv)</code> activated prompt.</li> </ul> <p>To include images in this lesson, add Markdown like:</p> <pre><code>![VS Code interpreter selector](Lessons/assets/vscode_interpreter.png)\n![Terminal activation](Lessons/assets/terminal_activation.png)\n</code></pre> <p>Last updated: 2025-10-07</p>"},{"location":"Lessons/lesson_01_getting_started/","title":"Lesson 1 \u2014 Getting Started","text":"<p>This is a placeholder for the Getting Started lesson. We'll cover installation, the REPL, running scripts, and a \"Hello, World\" exercise.</p>"},{"location":"Lessons/lesson_02_data_types/","title":"Lesson 2 \u2014 Data Types","text":"<p>Placeholder for Data Types: numbers, strings, lists, tuples, dictionaries, and common operations.</p>"},{"location":"Lessons/lesson_03_control_flow/","title":"Lesson 3 \u2014 Control Flow","text":"<p>Placeholder for Control Flow: conditional statements, loops, and common loop patterns.</p>"},{"location":"Lessons/lesson_04_functions/","title":"Lesson 4 \u2014 Functions","text":"<p>Placeholder for Functions: defining functions, arguments, return values, and basic design.</p>"}]}